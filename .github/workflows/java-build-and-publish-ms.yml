name: Maven Deploy and Docker Package

on:
  workflow_call:
    inputs: 
      exec-project:
        description: The main executable project
        required: false
        type: string
        default: '.'
      ecr-repository:
        description: Name of ECR repository for project
        required: true
        type: string
      java-version:
        description: JDK version (defaults to 8)
        required: false
        type: string
        default: '8'
      maven-command:
        description: The maven command to execute for main build
        required: false
        type: string
        default: 'mvn -B deploy -ntp'
      maven-extra-args:
        description: Additional maven arguments to be appended to command
        required: false
        type: string
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      sonar-token:
        required: false
    outputs:
      project-version:
        value: ${{ jobs.build.outputs.project-version }}
      image-version:
        value: ${{ jobs.build.outputs.final-version }}
jobs:
  build:
    name: Maven build
    runs-on: ubuntu-latest
    outputs:
      project-version: ${{ steps.versioning.outputs.project-version }}
      image-version: ${{ steps.versioning.outputs.final-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}          

      - name: Setting up maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v7
        with:
          servers: '[{ "id": "river-nexus", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" },{ "id": "platform-snapshots", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" },{ "id": "platform-releases", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" }]'
          mirrors: '[{ "id": "river-nexus", "mirrorOf": "*", "url": "https://nexus.riverigaming.tech/repository/maven-public/" }]'
          repositories: '[{ "id": "river-nexus", "url": "https://nexus.riverigaming.tech/repository/platform-releases" }]'

      - name: Cache
        if: ${{ github.run_attempt == 1 }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/com/river
            !~/.m2/repository/com/bejig
          key: river-cache
          restore-keys: river-cache

      - name: Build with Maven
        run: ${{ inputs.maven-command }} ${{ inputs.maven-extra-args }}

      - name: Run SonarQube if enabled
        if: env.SONAR_TOKEN
        run: mvn -ntp sonar:sonar -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}

      - name: Get release version
        id: versioning        
        run: |
          PROJECT_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
          BRANCH=${{ github.ref_name }}
          if [ ${{github.run_attempt}} -eq 1 ]
          then
            BUILD_NUMBER=${{ github.run_number}}
          else
            BUILD_NUMBER=${{ github.run_number}}-${{github.run_attempt}}
          fi
          case $BRANCH in
            master)              
              VERSION=$BRANCH-$PROJECT_VERSION
              ;;
            develop)
              VERSION=$(echo $BRANCH-$PROJECT_VERSION | sed "s/-SNAPSHOT/-$BUILD_NUMBER/")
              ;;
            *)
              VERSION=$BRANCH-$BUILD_NUMBER
              ;;
          esac
          RELEASE_TAG=$( echo $VERSION | sed "s/[^[:alnum:]#._-]/-/g" )
          echo "::notice::Setting ${{ inputs.ecr-repository }} version to: $RELEASE_TAG"
          echo "::set-output name=project-version::$PROJECT_VERSION"
          echo "::set-output name=final-version::$RELEASE_TAG"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.versioning.outputs.final-version }}
          EXEC_PROJECT: ${{ inputs.exec-project }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        run: |
          REPO=$(git config --get remote.origin.url)
          DATE=$(date --utc +%FT%TZ)
          docker buildx create --use
          docker buildx build \
          --build-arg JAR_FILE=$EXEC_PROJECT/target/*-exec.jar \
          --build-arg GIT_HASH=${{ github.sha }} \
          --build-arg DATE="$DATE" \
          --build-arg GIT_REPO=$REPO \
          --build-arg GIT_REF=${{ github.ref }} \
          --build-arg VERSION=${{ env.VERSION }} \
          --platform linux/amd64,linux/arm64 \
          --push \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
