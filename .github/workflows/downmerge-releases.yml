name: Downmerge releases

on:
  workflow_call:
    inputs:
        base-branch:
          description: Base branch of the repo to downmerge to
          required: false
          type: string
          default: "develop"
    secrets:
      github-token:
        required: true

jobs:
  checks:
    name: Downmerge to develop and release branches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Downmerge
        id: downmerge
        run: |
          git fetch
          git config user.email "deploy-bot@riverigaming.com"
          git config user.name "rig-autobot"

          MANUAL_MERGE=false
          # Determine the current branch and package version
          BASE_PACKAGE_VERSION=$(node -p "require('./package.json').version")
          CURRENT_BRANCH="$(git branch --show-current)"
          MAJOR_MINOR_PACKAGE_VERSION=$(echo $BASE_PACKAGE_VERSION | cut -d'.' -f1,2)

          # Iterate through branches and downmerge if they match the pattern
          for branch in $(git for-each-ref --format='%(refname:short)' 'refs/remotes/origin/release/*' "refs/remotes/origin/${{ inputs.base-branch }}"); do
            branch="${branch#origin/}" # Remove the 'origin/' prefix
            if [ "$branch" == "$CURRENT_BRANCH" ]; then
              continue
            fi

            BRANCH_VERSION=$(echo $branch | cut -d'/' -f2)
            MAJOR_MINOR_BRANCH_VERSION=$(echo $BRANCH_VERSION | cut -d'.' -f1,2)
            PATCH_BRANCH_VERSION=$(echo $BRANCH_VERSION | cut -d'.' -f3)
            NEWER_VERSION="$(printf '%s\n' "$MAJOR_MINOR_BRANCH_VERSION" "$MAJOR_MINOR_PACKAGE_VERSION" | sort -V | tail -n 1)"
            IS_CURRENT_RELEASE_BRANCH=$(if [[ $PATCH_BRANCH_VERSION == "x" && $MAJOR_MINOR_BRANCH_VERSION == $MAJOR_MINOR_PACKAGE_VERSION ]]; then echo "true"; else echo "false"; fi)
            if [[ $branch == "develop" || $NEWER_VERSION == $MAJOR_MINOR_BRANCH_VERSION || $IS_CURRENT_RELEASE_BRANCH == true ]]; then
              echo "::notice ::Downmerging branch: $branch from: $CURRENT_BRANCH"

              git checkout $branch

              # Merge changes from the remote branch into branch
              if git merge --no-commit --no-ff --no-edit ${CURRENT_BRANCH}; then
              if [[ $IS_CURRENT_RELEASE_BRANCH == false && (-z "$(git status --porcelain)") ]]; then
                echo "::notice ::Nothing to commit for branch: $branch"
              else
                git commit --no-edit
                git push origin $branch
              fi
              else
                CONFLICTS="$(git diff --name-only --diff-filter=U)"

                for file in $CONFLICTS; do
                  echo "::notice ::Conflicts: $CONFLICTS"
                    if [ "$file" == "package.json" ] || [ "$file" == "package-lock.json" ]; then
                    echo "::notice ::Auto-resolving $file version conflicts by choosing the HEAD version."
                    git checkout --ours $file
                    git add $file
                    MANUAL_MERGE=true
                  else
                    echo "::warning ::Failed to downmerge to branch: $branch. Merge error."
                    exit 1
                  fi
                done
                if [ "$MANUAL_MERGE" = true ]; then
                  git commit -m "chore(*): auto-resolve version conflicts"
                  git push origin $branch
                fi
              fi
            fi
            echo "manual-merge=${MANUAL_MERGE}" >> "$GITHUB_OUTPUT"
          done
      - name: Manual Merge Notification
        if: ${{ steps.downmerge.outputs.manual-merge == 'true' }}
        run: |
            echo "::error ::Auto merged conflicts. Review Changes Manually."
            exit 1
            
