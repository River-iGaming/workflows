name: Downmerge releases

on:
  workflow_call:
    inputs:
        base-branch:
          description: Base branch of the repo to downmerge to
          required: false
          type: string
          default: "master"
        commit-types:
          description: Allowed commit types for downmerge
          required: false
          type: string
          default: |
            feat
            fix
            release
    secrets:
      github-token:
        required: true

jobs:
  checks:
    name: Downmerge to a base and release branches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Check if downmerge allowed
        id: check-downmerge
        run: |        
          # Check if commit type matches
          COMMIT_TYPE_MATCHED=false
          readarray -t COMMIT_TYPES <<< "${{ inputs.commit-types }}"
          COMMIT_TYPES=($(printf "%s\n" "${COMMIT_TYPES[@]}" | sed '/^\s*$/d')) # Remove empty and whitespace-only lines
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          for type in "${COMMIT_TYPES[@]}"; do
            if [[ "$COMMIT_MESSAGE" == "$type"* ]]; then
              echo "::notice::Matched commit type: $type"
              COMMIT_TYPE_MATCHED=true
              break
            fi
          done
          if [ "$COMMIT_TYPE_MATCHED" = false ]; then
            ALLOWED_TYPES=$(IFS=", "; echo "${COMMIT_TYPES[*]}")
            echo "::error::No commit types matched for \"$COMMIT_MESSAGE\" | Allowed types: [$ALLOWED_TYPES]"
            echo "downmerge-allowed=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          # Check for prerelease or metadata in package version
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          if [[ "$PACKAGE_VERSION" == *"-"* || "$PACKAGE_VERSION" == *"+"* ]]; then 
            echo "::error::Downmerge is not allowed for prerelease versions or versions with metadata."
            echo "downmerge-allowed=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "downmerge-allowed=true" >> "$GITHUB_OUTPUT"

      - name: Get Branches for Downmerge
        id: get-branches
        if: ${{ steps.check-downmerge.outputs.downmerge-allowed == 'true' }}
        run: |
          git fetch

          # Determine the current branch and package version
          BASE_BRANCH="${{ inputs.base-branch }}"
          CURRENT_BRANCH="$(git branch --show-current)"
          PACKAGE_VERSION=$(jq -r '.version' package.json)

          if [[ "$CURRENT_BRANCH" =~ "release" ]]; then
            BASE_PACKAGE_VERSION=$(echo $CURRENT_BRANCH | cut -d'/' -f2)
          else
            BASE_PACKAGE_VERSION=$PACKAGE_VERSION
          fi

          # Get a list of branches for downmerge
          BRANCHES=$(git for-each-ref --format='%(refname:short)' 'refs/remotes/origin/release-test/*' "refs/remotes/origin/$BASE_BRANCH")
          DOWNMERGE_BRANCHES=()
          for branch in $BRANCHES; do
            branch="${branch#origin/}" # Remove the 'origin/' prefix
            BRANCH_VERSION=$(echo $branch | cut -d'/' -f2)
            NEWER_VERSION="$(printf '%s\n' "$BRANCH_VERSION" "$BASE_PACKAGE_VERSION" | sort -V | tail -n 1)"

            if [[ $branch == $BASE_BRANCH || ($NEWER_VERSION == $BRANCH_VERSION && "$BRANCH_VERSION" != "$BASE_PACKAGE_VERSION") ]]; then
              DOWNMERGE_BRANCHES+=("$branch")
            fi
          done

          echo "downmerge-branches=$(IFS=', '; echo "${DOWNMERGE_BRANCHES[*]}")" >> "$GITHUB_OUTPUT"

      - name: Downmerge
        id: downmerge
        if: ${{ steps.get-branches.outputs.downmerge-branches != '' }}
        run: |
          git config user.email "deploy-bot@riverigaming.com"
          git config user.name "rig-autobot"

          IFS=',' read -ra DOWNMERGE_BRANCHES <<< "${{ steps.get-branches.outputs.downmerge-branches }}"
          DOWNMERGE_FAILED_BRANCHES=()
          CURRENT_BRANCH="$(git branch --show-current)"

          downmerge_branch() {
            local branch="$1"
            echo "::notice::Downmerging branch: $branch from: $CURRENT_BRANCH"

            git checkout "$branch"

            if git merge --no-commit --no-ff --no-edit "$CURRENT_BRANCH"; then
              if [[ -z "$(git status --porcelain)" ]]; then
                echo "::notice::Nothing to commit for branch: $branch"
              else
                git commit --no-edit
                git push origin "$branch"
              fi
            else
              CONFLICTS="$(git diff --name-only --diff-filter=U)"
              echo "::warning::Conflicts: $CONFLICTS"
              echo "::error::Failed to downmerge to branch: $branch. Merge error."
              git merge --abort
              return 2
            fi

            return 0
          }

          # Iterate through branches and downmerge
          for branch in "${DOWNMERGE_BRANCHES[@]}"; do
            set +e # disable exit on error to prevent job from failing immediately
            OUTPUT=$(downmerge_branch "$branch" 2>&1)
            STATUS=$?
            set -e # re-enable exit on error

            DOWNMERGE_STATUS=$([ "$STATUS" -eq 0 ] && echo "✅" || echo "❌")

            if [ "$STATUS" -eq 2 ]; then
              DOWNMERGE_FAILED_BRANCHES+=("$branch")
            fi

            echo "::group::$DOWNMERGE_STATUS - Branch: $branch"
            echo "$OUTPUT"
            echo "::endgroup::"
          done
          
          echo "downmerge-failed-branches=$(IFS=', '; echo "${DOWNMERGE_FAILED_BRANCHES[*]}")" >> "$GITHUB_OUTPUT" 
      
      - name: Failed Merge Notification
        if: ${{ steps.downmerge.outputs.downmerge-failed-branches != '' }}
        run: |
            IFS=',' read -ra BRANCHES <<< "${{ steps.downmerge.outputs.downmerge-failed-branches }}"
            MSG="::error::Failed to downmerge the following branches:"
            for b in "${BRANCHES[@]}"; do
              MSG+="%0A- $b"
            done
            MSG+="%0AReview logs manually."

            echo "$MSG"
            exit 1
            
