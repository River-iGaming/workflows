on:
  workflow_call:
    inputs:
      projects:
        description: JSON array of project and ecr-repository
        required: true
        type: string
      java-version:
        description: JDK version (defaults to 8)
        required: false
        type: string
        default: '8'
      maven-command:
        description: The maven command to execute for main build
        required: false
        type: string
        default: 'mvn -B deploy -ntp'
      maven-extra-args:
        description: Additional maven arguments to be appended to command
        required: false
        type: string
      docker-platforms:
        description: "Comma seperated list of platforms to use when building the docker image"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      sonar-token:
        required: false
    outputs:
      project-version:
        value: ${{ jobs.build.outputs.project-version }}
      image-version:
        value: ${{ jobs.build.outputs.final-version }}
jobs:
  build:
    name: Build projects
    runs-on: ubuntu-latest
    outputs:
      project-version: ${{ steps.versioning.outputs.project-version }}
      final-version: ${{ steps.versioning.outputs.final-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1 
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}

      - name: Setting up maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          servers: '[{ "id": "river-nexus", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" },{ "id": "platform-snapshots", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" },{ "id": "platform-releases", "username": "${{ secrets.nexus-username }}", "password": "${{ secrets.nexus-password }}" }]'
          mirrors: '[{ "id": "river-nexus", "mirrorOf": "*", "url": "${{ vars.MAVEN_REPOSITORY_BASE_URL }}maven-public/" }]'
          repositories: '[{ "id": "river-nexus", "url": "${{ vars.MAVEN_REPOSITORY_BASE_URL }}platform-releases" }]'

      - name: Cache
        if: ${{ github.run_attempt == 1 }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/com/river
            !~/.m2/repository/com/bejig
          key: river-cache
          restore-keys: river-cache

      - name: Build with Maven
        run: ${{ inputs.maven-command }} ${{ inputs.maven-extra-args }}

      - name: Run SonarQube if enabled
        if: env.SONAR_TOKEN
        run: mvn -ntp sonar:sonar -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}

      - name: Get release version
        id: versioning
        run: |
          PROJECT_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
          BRANCH=${{ github.ref_name }}
          if [ ${{github.run_attempt}} -eq 1 ]
          then
            BUILD_NUMBER=${{ github.run_number}}
          else
            BUILD_NUMBER=${{ github.run_number}}-${{github.run_attempt}}
          fi
          case $BRANCH in
            master)
              VERSION=$BRANCH-$PROJECT_VERSION
              ;;
            develop)
              VERSION=$(echo $BRANCH-$PROJECT_VERSION | sed "s/-SNAPSHOT/-$BUILD_NUMBER/")
              ;;
            *)
              VERSION=$BRANCH-$BUILD_NUMBER
              ;;
          esac
          RELEASE_TAG=$( echo $VERSION | sed "s/[^[:alnum:]#._-]/-/g" )
          echo "project-version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "final-version=$RELEASE_TAG" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        name: Uploading artifacts
        with:
          name: projects
          path: |
            Dockerfile
            dockerfile
            docker-compose.*
            **/target/*-exec.jar
        
  package:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        project: ${{ fromJSON(inputs.projects)}}
    steps: 
      - uses: actions/download-artifact@v4
        with:
          name: projects
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Setup Docker buildx
        id: buildx-setup
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.build.outputs.final-version }}
          EXEC_PROJECT: ${{ matrix.project.path }}
          ECR_REPOSITORY: ${{ matrix.project.ecr-repository }}
        run: |
          DATE=$(date --utc +%FT%TZ)
          docker buildx build \
          --build-arg JAR_FILE=$EXEC_PROJECT/target/*-exec.jar \
          --build-arg GIT_HASH=${{ github.sha }} \
          --build-arg DATE="$DATE" \
          --build-arg GIT_REPO=$GITHUB_REPOSITORY \
          --build-arg GIT_REF=${{ github.ref }} \
          --build-arg VERSION=${{ env.IMAGE_TAG }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --platform ${{ inputs.docker-platforms }} \
          --progress plain --push .

          echo "::notice::Pushed image $ECR_REPOSITORY:$IMAGE_TAG"

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

