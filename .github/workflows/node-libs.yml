name: Node library build/publish
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 18)
        required: false
        type: string
        default: '18'
      npm-registry:
        description: The url for npm registry
        required: false
        type: string
        default: //nexus.rivertech.dev/repository/npm/
      npm-registry-publish:
          description: The address for npm registry publish
          required: false
          type: string
          default: //nexus.rivertech.dev/repository/odin-npm/
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: '@odin'
      junit-report-path:
        description: The path to unit test report (defaults to ./junit/)
        required: false
        type: string
        default: ./junit/
      junit-report-name:
        description: The file name for unit test report (defaults to test-results.xml)
        required: false
        type: string
        default: test-results.xml
      aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      has-storybook:
        description: Whether storybook exists in project (defaults to false)
        required: false
        type: boolean
        default: false
      monoTemplate:
        description: Specify which template to use for mono repo e.g. 'lerna', 'node' (defaults to 'lerna')
        required: false
        type: string
        default: lerna
      publish-command:
        description: "Command to run to publish packages (defaults to: `npm run release` NOTE: NOT `npm publish`)"
        type: string
        default: npm run release
        required: false
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      github-token:
        required: true

concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish library
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          always-auth: true
          node-version: ${{ inputs.node-version }}

      - name: Print environment versions
        run: |
          NODE_V=$(node --version)
          NPM_V=$(npm -v)
          echo node version':' $NODE_V
          echo npm version':' $NPM_V

      - name: Checkout
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Get commit message and branch name
        id: git
        run: |
          EVENT=${{ github.event_name }}
          if [ $EVENT == "pull_request" ]; then
            BRANCH_NAME=${{github.head_ref}}
            echo "::set-output name=branch-name::${BRANCH_NAME}"
            echo ::set-output name=commit-message::$(git log --format=%B -n 1 HEAD^2)
          else
            echo "::set-output name=branch-name::${GITHUB_REF_NAME}"
            echo ::set-output name=commit-message::$(git log --format=%B -n 1 HEAD)
          fi

      - name: NPM TOKEN
        id: npm_token
        run: |
          NODE_AUTH_TOKEN=$(echo -n "${{ secrets.nexus-username }}:${{ secrets.nexus-password }}" | openssl base64 -e)
          echo "token=${NODE_AUTH_TOKEN}" >> "$GITHUB_OUTPUT"

      - name: Setup Environment
        run: |
          npm config set ${{inputs.npm-registry}}:_auth=${{ steps.npm_token.outputs.token }}
          npm config set ${{inputs.npm-registry-publish}}:_auth=${{ steps.npm_token.outputs.token }}
          npm config set registry=https:${{ inputs.npm-registry }}
          npm config set @odin:registry=https:${{ inputs.npm-registry-publish }}

      - name: Install npm
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test:ci --if-present -- --browsers=ChromeHeadlessCI --no-watch --no-progress
        # run: npm run test --if-present -- --browsers=ChromeHeadlessCI --no-watch --no-progress

      - name: Build storybook
        if: inputs.has-storybook
        run: npm run build:storybook

      - name: Check if branch is publishable
        id: check-branch
        env:
          BRANCH_NAME: ${{ steps.git.outputs.branch-name}}
        run: |
          echo "::notice ::Branch name: $BRANCH_NAME"
          
          if ! ([ $BRANCH_NAME = "master" ] || [ $BRANCH_NAME = "feature/ci-wf" ] || [[ "$BRANCH_NAME" =~ ^([0-9].*)\.x$ ]]); then
          # todo: switch back
          # if ! ([ $BRANCH_NAME = "master" ] || [ $BRANCH_NAME = "vnext" ] || [[ "$BRANCH_NAME" =~ ^([0-9].*)\.x$ ]]); then
            PUBLISHABLE=false
            echo "::notice ::Non-publishable branch."
          else 
            PUBLISHABLE=true
          fi
          echo "publishable=$PUBLISHABLE" >> $GITHUB_OUTPUT
          echo "PUBLISHABLE=$PUBLISHABLE" >> $GITHUB_ENV

      - name: Check if commit is publishable
        id: commit
        if: ${{ env.PUBLISHABLE == 'true' }}
        env:
          COMMIT_MESSAGE: ${{ steps.git.outputs.commit-message}}
        run: |
          echo "::notice ::Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" =~ ^(style|test|docs) ]]; then
            PUBLISHABLE=false
            echo "::notice ::This update doesn't need to be published."
          else
            PUBLISHABLE=true
            if [[ ${{inputs.has-storybook}} == true ]]; then
              STORYBOOK_PUBLISHABLE=true
              echo "SPORTSBOOK PUBLISHABLE!"
            fi
          fi
          echo "publishable=$PUBLISHABLE" >> $GITHUB_OUTPUT
          echo "PUBLISHABLE=$PUBLISHABLE" >> $GITHUB_ENV
          echo "STORYBOOK PUBLISHABLE: $STORYBOOK_PUBLISHABLE"
          echo "STORYBOOK_PUBLISHABLE=$STORYBOOK_PUBLISHABLE" >> $GITHUB_ENV

      - name: Get package version
        id: versioning
        if: ${{ env.PUBLISHABLE == 'true' }}
        run: |
          if [[ ${{ inputs.monoTemplate }} == "lerna" ]]; then
            VERSION_FILE=lerna
          elif [[ ${{ inputs.monoTemplate }} == "node" ]]; then
            VERSION_FILE=package
          else
            echo "::error ::Mono template '${{ inputs.monoTemplate }}' not handled!"
            exit 1
          fi
          echo "VERSION_FILE=$VERSION_FILE" >> $GITHUB_ENV
          PACKAGE_VERSION=$(node -p "require('./$VERSION_FILE.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: tag
        if: ${{ env.PUBLISHABLE == 'true' }}
        with:
          tag: ${{ env.PACKAGE_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Error if tag exists
        if: ${{ env.PUBLISHABLE == 'true' && steps.tag.outputs.exists == 'true' }}
        run: |
          echo "::error ::Tag already exists. Please make sure you bump version!"
          exit 1

      - name: Configure AWS credentials
        if: ${{ env.STORYBOOK_PUBLISHABLE == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ env.STORYBOOK_PUBLISHABLE == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Publish storybook
        if: ${{ env.STORYBOOK_PUBLISHABLE == 'true' }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
          BRANCH_NAME: ${{ steps.git.outputs.branch-name}}
        run: |
          # TAG=$(node -p "require('./storybook/package.json').version")
          TAG=$PACKAGE_VERSION
          
          # todo: try and replace by using the name from the package.json instead (but not able to change it)
          # STORYBOOK_NAME=$(node -p "require('./storybook/package.json').dockerName")
          STORYBOOK_NAME=$(node -p "require('./storybook/package.json').dockerName")
          echo "Storybook Name: $STORYBOOK_NAME"
          if [ "$BRANCH_NAME" = "develop" ]
          then
            TAG=$TAG-dev-$GITHUB_RUN_ID
          elif [[ "$BRANCH_NAME" =~ ^feature\/(.*)$ ]]
          then
            TAG=$TAG-demo-${BASH_REMATCH[1]}-$GITHUB_RUN_ID
          fi

          [[ $ECR_HOST =~ ^([0-9]*) ]] && REGISTRY=${BASH_REMATCH[1]}

          if aws ecr describe-images --repository-name=$STORYBOOK_NAME --registry-id $REGISTRY --image-ids=imageTag=$TAG > /dev/null 2>&1; then
            echo "::notice ::$TAG already exists on remote... skipping..."
            exit 0
          fi

          TAG=$TAG docker-compose build
          TAG=$TAG docker-compose push

      - name: Logout of Amazon ECR
        if: ${{ env.STORYBOOK_PUBLISHABLE == 'true' }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Publish
        if: ${{ env.PUBLISHABLE == 'true' }}
        run: |
          echo "Publishing ..."
          # npm run publish:rel # todo: remove
          ${{ inputs.publish-command }}

          echo "Tagging code base"
          git tag $PACKAGE_VERSION
          git push origin $PACKAGE_VERSION

      - name: Store tests artifact
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ inputs.junit-report-name }}
          path: ${{ inputs.junit-report-path }}
          retention-days: 2

      - name: Store npm artifact
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: npm-logs
          path: ~/.npm/_logs/*
          retention-days: 2
