name: Publish Avro Nugets

on:
  workflow_call:
    inputs:
      project-version:
        description: Project version
        type: string
        required: true
      project-namespace:
        description: Namespace for generated models
        type: string
        required: true
      avro-path:
        description: Relative path for avro schema files
        type: string
        required: false
        default: ./realtime/src/main/avro
      nuget-registry-url:
        description: The url address for nuget registry
        required: false
        type: string
        default: ${{ vars.NUGET_REGISTRY_URL }}
      nuget-publish-url:
        description: The url address where to publish nugets
        required: false
        type: string
        default: ${{ vars.NUGET_PLATFORM_URL }}
    secrets:
      nuget-server-token:
        description: Access token for Nuget server
        required: true

jobs:
  publish_nugets:
    name: Publish Nuget Packages
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true   
      NUGET_AUTH_TOKEN: ${{ secrets.nuget-server-token }}
      PACKAGE: ${{ inputs.project-namespace }}
    steps:
      - name: Getting Nuget release version
        env:
          PROJECT_VERSION: ${{ inputs.project-version }}
        run: |
          BUILD_NUMBER=${{ github.run_number}}
          VERSION=$(echo "${PROJECT_VERSION/SNAPSHOT/dev-$BUILD_NUMBER}")
          echo "NUGET_VERSION=$VERSION" >> $GITHUB_ENV
          echo Setting version to: $VERSION
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4.0.0      
        with:
          source-url: ${{ inputs.nuget-registry-url }}
          dotnet-quality: ga
          dotnet-version: 8.x
      - name: Checkout
        uses: actions/checkout@v4.1.1
        
      - name: Setup Avro Generator
        run: dotnet tool install sucrose.avro.codegen -g

      - name: Generate Avro nuget package
        env: 
          NUGET_VERSION: ${{ env.NUGET_VERSION }}
        run: |
          # Create class library and clean out default file
          dotnet new classlib --output out/$PACKAGE
          rm out/$PACKAGE/Class1.cs
          # Generate .NET classes from Avro Schema
          avromagic --schema-path ${{ inputs.avro-path }} --output-dir ./out/$PACKAGE
          dotnet add ./out/$PACKAGE package Odin.Messaging.SerDes -v "[15.110,666)" # A test version was labelled 666.0.0 which will always be the upper bound when restoring the package. Needs to be excluded.
          dotnet pack -c Release -p:PackageVersion=$NUGET_VERSION ./out/$PACKAGE -o ./nupkg/
      - name: Push Nuget package to Nexus
        run: |
          dotnet nuget push ./nupkg/*.nupkg -k $NUGET_AUTH_TOKEN --source ${{ inputs.nuget-publish-url }}
          echo "::notice::Pushed $PACKAGE $NUGET_VERSION to '${{ inputs.nuget-publish-url }}'"
