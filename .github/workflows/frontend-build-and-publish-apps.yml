name: Frontend Build and Publish Apps
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 18)
        required: false
        type: string
        default: "18"
      npm-registry:
        description: The url for npm registry
        required: false
        type: string
        default: //nexus.rivertech.dev/repository/npm/
      npm-registry-publish:
        description: The address for npm registry publish
        required: false
        type: string
        default: //nexus.rivertech.dev/repository/odin-npm/
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: "@odin"
      package-manager:
        description: "Specify which package manager to use for repo e.g. 'npm', 'pnpm' (defaults: 'npm')"
        required: false
        type: string
        default: npm
      aws-region:
        description: Which AWS region to use for publish (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      secondary-aws-region:
        description: Which AWS region to use for publish (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      dotnet-version:
        description: dotnet version to use (defaults to 7.0.x)
        required: false
        type: string
        default: "7.0.x"

      project-path:
        description: project path directory(defaults to './')
        required: false
        type: string
        default: "./"

      publish:
        description: Set to true to publish artifacts to docker repository
        required: false
        type: boolean
        default: true

      tagSuffixPreamble:
        description: A prefix to add to the tag suffix. Useful for testing.
        required: false
        type: string
        default: ""

      secondaryEcrLogin:
        description: Logic for secondary ECR login.
        required: false
        type: boolean
        default: false

    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      secondary-aws-access-key-id:
        required: false
      secondary-aws-secret-access-key:
        required: false
      github-token:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      PUBLISH_PATH: obj/Docker/publish
      ODIN_CI_DEBUG_MODE: "true"
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    outputs:
      app-version: ${{ steps.version-builder.outputs.version }}
    steps:
      - name: Debug Action Contexts
        uses: henrygriffiths/debug_action@v1
        with:
          secrets_context: ${{ toJson(secrets) }}
          needs_context: ${{ toJson(needs) }}

      - name: Validate input
        run: |
          if [[ "${{ inputs.package-manager }}" != "npm" && "${{ inputs.package-manager }}" != "pnpm" ]]; then
            echo "Invalid package manager: '${{ inputs.package-manager}}'. Please use 'npm' or 'pnpm'."
            exit 1
          fi
      - name: Checkout
        uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 1
          token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout
        uses: actions/checkout@v4
        if: github.event_name != 'pull_request'
        with:
          token: ${{ secrets.github-token }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: ${{ inputs.node-version }}
          cache: ${{ inputs.package-manager }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          cache: true
          cache-dependency-path: "./Directory.Packages.props"

      - name: Print environment versions
        run: |
          NODE_V=$(node --version)
          NPM_V=$(npm -v)
          echo node version':' $NODE_V
          echo npm version':' $NPM_V
          docker -v
          DOTNET_CLI_V=$(dotnet --version)
          echo dotnet cli version':' $DOTNET_CLI_V
          git --version

      - name: NPM TOKEN
        id: npm_token
        run: |
          NODE_AUTH_TOKEN=$(echo -n "${{ secrets.nexus-username }}:${{ secrets.nexus-password }}" | openssl base64 -e)
          echo "token=${NODE_AUTH_TOKEN}" >> "$GITHUB_OUTPUT"

      - name: Setup NPM
        run: |
          npm config set ${{inputs.npm-registry}}:_auth=${{ steps.npm_token.outputs.token }}
          npm config set registry=https:${{ inputs.npm-registry }}

      - name: Package Json Metadata
        id: package-json
        run: |
          echo "build-solution=$(node -p "require('${{ inputs.project-path }}package.json').vsBuildSolution")" >> "$GITHUB_OUTPUT"
          echo "name=$(node -p "require('${{ inputs.project-path }}package.json').name")" >> "$GITHUB_OUTPUT"
          echo "version=$(node -p "require('${{ inputs.project-path }}package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Generate Version Number
        id: version-builder
        uses: River-iGaming/actions/dotnet/versions@v2
        with:
          type: fe-app
          package-version: ${{ steps.package-json.outputs.version }}

      - name: Prepare Build Metadata and Environment
        id: metadata
        run: |
          IS_PUBLISHABLE="${{ inputs.publish }}"

          # expose metadata as workflow variables
          echo "publishable=${IS_PUBLISHABLE}" >> "$GITHUB_OUTPUT"

          # expose metadata as environment variables
          echo "GIT_COMMIT=${{ github.event.after }}" >> $GITHUB_ENV

          echo "::notice ::IsPublishable: $IS_PUBLISHABLE"

      - name: Check if tag exists
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: mukunku/tag-exists-action@v1.6.0
        id: tag
        with:
          tag: ${{ steps.version-builder.outputs.version }}

      - name: Inform if tag exists
        if: ${{ steps.metadata.outputs.publishable == 'true' && steps.tag.outputs.exists == 'true' }}
        run: |
          echo "::error ::Tag already exists. Please make sure you bump version!"
          exit 1

      - name: FE install
        env:
          NODE_AUTH_TOKEN: ${{ steps.npm_token.outputs.token }}
        run: |
          if [[ ${{ inputs.package-manager }} == "npm" ]]; then
            npm ci
          elif [[ ${{ inputs.package-manager }} == "pnpm" ]]; then
            pnpm i
          else
            echo "::error ::Package manager '${{ inputs.package-manager }}' not handled!"
            exit 1
          fi

      - name: Cache build cache
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            .angular/cache
          key: ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc*', 'eslint.config.*', '.eslintcache') }}
          restore-keys: |
            ${{ runner.os }}-eslint-

      # - name: Cache eslint
      #   uses: actions/cache@v4
      #   with:
      #     path: .eslintcache
      #     key: ${{ runner.os }}-eslint-${{ hashFiles('.eslintrc*', 'eslint.config.*', '.eslintcache') }}
      #     restore-keys: |
      #       ${{ runner.os }}-eslint-

      - name: Output folder structure
        run: ls -aL

      - name: Output current directory
        run: pwd

      # - name: Output .eslintcache content
      #   run: cat .eslintcache
      - name: ng cache info
        run: npm run ng cache info

      - name: FE lint
        run: npm run lint

      - name: ng cache info
        run: npm run ng cache info
      - name: FE build
        run: npm run build:rel

      - name: Dotnet restore
        run: dotnet restore ${{ steps.package-json.outputs.build-solution }} /p:Configuration=Release

      - name: Dotnet publish
        run: dotnet publish ${{ steps.package-json.outputs.build-solution }} -c Release -o ./$PUBLISH_PATH --no-restore

      - name: Configure AWS credentials
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Configure Secondary AWS credentials
        if: ${{ inputs.secondaryEcrLogin }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.secondary-aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.secondary-aws-secret-access-key }}
          aws-region: ${{ inputs.secondary-aws-region }}

      - name: Login to Secondary Amazon ECR
        id: secondary-login-ecr
        if: ${{ inputs.secondaryEcrLogin }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker buildx
        id: buildx-setup
        uses: docker/setup-buildx-action@v3

      - name: Deploy
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: ${{ steps.package-json.outputs.name }}
          APP_VERSION: ${{ steps.version-builder.outputs.version }}
          GIT_COMMIT: ${{ env.GIT_COMMIT }}
        run: |
          docker buildx bake -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml web --progress plain --push

      - name: Logout of Amazon ECR
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Logout of Secondary Amazon ECR
        if: ${{ inputs.secondaryEcrLogin }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Create git tag for release
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        env:
          VERSION: ${{ steps.version-builder.outputs.version }}
        run: |
          git tag $VERSION
          git push origin $VERSION

  merge:
    name: merge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v6

      - name: Check if vnext exists
        if: ${{ steps.branch.outputs.current_branch == 'master' }}
        id: vnext
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: vnext

      - name: Merge master -> vnext
        if: ${{ steps.vnext.outputs.exists == 'true' }}
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: vnext
          github_token: ${{ secrets.github-token }}
          message: "feat(*): merge from master"
