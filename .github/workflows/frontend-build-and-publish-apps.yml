name: Frontend Build and Publish Apps
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 14)
        required: false
        type: string
        default: '14'
      npm-registry-url:
        description: The url address for npm registry (defaults to https://www.myget.org/F/river-tech/npm/)
        required: false
        type: string
        default: https://www.myget.org/F/river-tech/npm/
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: '@odin'
      aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      dotnet-version:
        description: dotnet version to use (defaults to 6.0.x)
        required: false
        type: string
        default: '6.0.x'
    secrets:
      npm-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      github-token:
        required: true

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      PUBLISH_PATH: obj/Docker/publish
      ODIN_CI_DEBUG_MODE: "true"
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          always-auth: true
          registry-url: ${{ inputs.npm-registry-url }}
          scope: ${{ inputs.npm-registry-scope }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Print environment versions
        run: |
          NODE_V=$(node --version)
          NPM_V=$(npm -v)
          echo node version':' $NODE_V
          echo npm version':' $NPM_V
          docker -v
          docker-compose -v
          DOTNET_CLI_V=$(dotnet --version)
          echo dotnet cli version':' $DOTNET_CLI_V
          git --version

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Install tools
        run: npm i -g @odin/infra.ci@0.1.22
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}

      - name: Extract branch name
        id: branch
        run: |
          EVENT=${{ github.event_name }}
          if [ $EVENT == "pull_request" ]; then
            BRANCH_NAME=${{github.head_ref}}
            echo "name=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "name=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine Application Version
        id: version
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name}}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          # ensure we have a unique suffix
          if [ ${{github.run_attempt}} -eq 1 ]
          then
            RUN_ID=${{ github.run_id}}
          else
            RUN_ID=${{ github.run_id}}.${{github.run_attempt}}
          fi

          TAG_SUFFIX=""
          if [[ "$BRANCH_NAME" =~ ^(demo|feature|dependabot)\/(.*)$ ]]
          then
            echo "::notice ::Demo/Feature/Dependabot Branch."
            TAG_SUFFIX="demo-${BASH_REMATCH[2]}-$RUN_ID"
          elif [[ "$BRANCH_NAME" =~ ^hotfix\/(.*)$ ]]
          then
            echo "::notice ::Hotfix Branch."
            TAG_SUFFIX="hotfix-${BASH_REMATCH[1]}-$RUN_ID"
          elif [[ "$BRANCH_NAME" =~ ^release\/(.*)$ ]]
          then
            echo "::notice ::Release Branch."
            TAG_SUFFIX="release-${BASH_REMATCH[1]}-$RUN_ID"
          elif [[ "$BRANCH_NAME" =~ ^vnext$ ]]
          then
            echo "::notice ::VNEXT Branch."
            TAG_SUFFIX="vnext-$RUN_ID"
          elif [[ "$BRANCH_NAME" == "develop" ]]
          then
            echo "::notice ::Develop Branch."
            TAG_SUFFIX="dev-$RUN_ID"
          elif [[ "$BRANCH_NAME" =~ ^master$ ]]
          then
            echo "::notice ::Master Branch."
          else
            echo "::warning ::Branch matching didn't work."
          fi


          # echo "VERSION_SUFFIX=$TAG_SUFFIX" >> $GITHUB_ENV
          echo "version_suffix=${TAG_SUFFIX}" >> "$GITHUB_OUTPUT"
          if [ "$TAG_SUFFIX" == "" ]; then
            echo "::notice ::AppVersion ${PACKAGE_VERSION}."
            echo "app_version=${PACKAGE_VERSION}" >> "$GITHUB_OUTPUT"
          else
            echo "::notice ::AppVersion ${PACKAGE_VERSION}-${TAG_SUFFIX}."
            echo "app_version=${PACKAGE_VERSION}-${TAG_SUFFIX}" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if branch is publishable
        id: check-branch
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name}}
        run: |
          echo "::notice ::Branch name: $BRANCH_NAME"

          if ! ([ $BRANCH_NAME = "develop" ] || [ $BRANCH_NAME = "master" ] || [ $BRANCH_NAME = "vnext" ] || [[ "$BRANCH_NAME" =~ ^(feature|hotfix|dependabot|release)\/(.*)$ ]] || [[ "$BRANCH_NAME" =~ ^(([0-9]+|\.)+x)$ ]]); then
            echo "publishable=false" >> "$GITHUB_OUTPUT"
            echo "::notice ::Non-publishable branch."
          else
            echo "publishable=true" >> "$GITHUB_OUTPUT"
          fi

          if [ "$BRANCH_NAME" == "master" ]
          then
            echo "::notice ::Downmerge To Develop Enabled."
            echo "downmerge_to_develop=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice ::Downmerge To Develop Disabled. Branch is not master."
            echo "downmerge_to_develop=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set environment variables
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name}}
          APP_VERSION: ${{ steps.version.outputs.app_version}}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "APP_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "GIT_COMMIT=${{ github.event.after }}" >> $GITHUB_ENV
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Check if tag exists
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        uses: mukunku/tag-exists-action@v1.2.0
        id: tag
        with:
          tag: ${{ env.APP_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Inform if tag exists
        if: ${{ steps.check-branch.outputs.publishable == 'true' && steps.tag.outputs.exists == 'true' }}
        run: |
          echo "::error ::Tag already exists. Please make sure you bump version!"
          exit 1

      - name: Install npm
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build:rel

      - name: Dotnet restore/publish
        run: |
            SOLUTION=$(node -p "require('./package.json').vsBuildSolution")
            dotnet restore $SOLUTION /p:Configuration=Release
            dotnet publish $SOLUTION -c Release -o ./$PUBLISH_PATH

      - name: Configure AWS credentials
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml build
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml push

      - name: Logout of Amazon ECR
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Create Git tag for release
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        run: |
          git tag $APP_VERSION
          git push origin $APP_VERSION

      - name: Downmerge master to develop
        if: ${{ steps.check-branch.outputs.downmerge_to_develop == 'true' }}
        run:  |
          git fetch
          git checkout develop
          git config user.email "deploy-bot@riverigaming.com"
          git config user.name "rig-autobot"

          if git merge --no-commit --no-ff --no-edit origin/master
          then
            if [ -z "$(git status --porcelain)" ]
            then
              echo "::notice ::Nothing to commit"
            else
              git commit --no-edit
              git push origin develop
            fi
          else
            if git merge HEAD
            then
              echo "::notice ::"Nothing to merge"
            else
              echo "::warning ::"Failed to downmerge. Conflicts between master and develop."
              git merge --abort
            fi
          fi

#      - name: Store npm artifact
#        uses: actions/upload-artifact@v3.1.2
#        if: failure()
#        with:
#          name: npm-logs
#          path: ~/.npm/_logs/*
#          retention-days: 2

  merge:
    name: merge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v6

      - name: Check if vnext exists
        if: ${{ steps.branch.outputs.current_branch == 'master' }}
        id: vnext
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: vnext

      - name: Merge master -> vnext
        if: ${{ steps.vnext.outputs.exists == 'true' }}
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: vnext
          github_token: ${{ secrets.github-token }}
          message: 'feat(*): merge from master'
