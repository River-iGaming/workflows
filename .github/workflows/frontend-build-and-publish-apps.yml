name: Frontend Build and Publish Apps
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 18)
        required: false
        type: string
        default: "18"
      npm-registry:
        description: The url for npm registry
        required: false
        type: string
        default: //nexus.rivertech.dev/repository/npm/
      npm-registry-publish:
        description: The address for npm registry publish
        required: false
        type: string
        default: //nexus.rivertech.dev/repository/odin-npm/
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: "@odin"
      aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      secondary-aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      dotnet-version:
        description: dotnet version to use (defaults to 7.0.x)
        required: false
        type: string
        default: "7.0.x"

      publish:
        description: Set to true to publish artifacts to docker repository
        required: false
        type: boolean
        default: true

      tagSuffixPreamble:
        description: A prefix to add to the tag suffix. Useful for testing.
        required: false
        type: string
        default: ''
      
      secondaryEcrLogin:
        description: Logic for secondary ECR login.
        required: false
        type: boolean
        default: false

    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      secondary-aws-acces-key-id:
        required: false
      secondary-aws-secret-access-key:
        required: false
      github-token:
        required: true

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      PUBLISH_PATH: obj/Docker/publish
      ODIN_CI_DEBUG_MODE: "true"
    outputs:
      app_version: ${{ steps.metadata.outputs.version }}
    steps:
      - name: Debug Action Contexts
        uses: henrygriffiths/debug_action@v1
        with:
          secrets_context: ${{ toJson(secrets) }}
          needs_context: ${{ toJson(needs) }}

      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          always-auth: true
          node-version: ${{ inputs.node-version }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Print environment versions
        run: |
          NODE_V=$(node --version)
          NPM_V=$(npm -v)
          echo node version':' $NODE_V
          echo npm version':' $NPM_V
          docker -v
          docker-compose -v
          DOTNET_CLI_V=$(dotnet --version)
          echo dotnet cli version':' $DOTNET_CLI_V
          git --version

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 1
          token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: NPM TOKEN
        id: npm_token
        run: |
          NODE_AUTH_TOKEN=$(echo -n "${{ secrets.nexus-username }}:${{ secrets.nexus-password }}" | openssl base64 -e)
          echo "token=${NODE_AUTH_TOKEN}" >> "$GITHUB_OUTPUT"

      - name: Setup NPM
        run: |
          npm config set ${{inputs.npm-registry}}:_auth=${{ steps.npm_token.outputs.token }}
          npm config set registry=https:${{ inputs.npm-registry }}

      - name: Install Odin CI tooling (deprecated)
        run: npm i -g @odin/infra.ci@0.1.22
        env:
          NODE_AUTH_TOKEN: ${{ steps.npm_token.outputs.token }}

      - name: Determine Branch Name
        id: branch
        run: |
          # determine branch name (diff source since this workflow can run either on push or pull_request events)
          case "${{ github.event_name }}" in
            "pull_request")
            BRANCH_NAME="${{ github.head_ref }}"
            ;;
            *)
            BRANCH_NAME="${GITHUB_REF_NAME}"
            ;;
          esac
          echo "name=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
          echo "::notice ::Branch name: $BRANCH_NAME"

      - name: Prepare Build Metadata and Environment
        id: metadata
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name}}
        run: |
          # enable bash pattern matching
          shopt -s extglob;

          # determine version + tag
          BASE_PACKAGE_VERSION=$(node -p "require('./package.json').version")
          APP_NAME=$(node -p "require('./package.json').name")

          # ensure we have a unique suffix
          if [ ${{github.run_attempt}} -eq 1 ]
          then
            RUN_ID="${{ github.run_id}}-0"
          else
            RUN_ID="${{ github.run_id}}-${{github.run_attempt}}"
          fi

          TAG_SUFFIX=""
          IS_PUBLISHABLE="${{ inputs.publish }}"
          case "$BRANCH_NAME" in
            "main"|"master")
            ;;
            "develop")
            TAG_SUFFIX="dev-${RUN_ID}"
            ;;

            "vnext")
            TAG_SUFFIX="vnext-$RUN_ID"
            ;;

            # feature
            feature\/+(?) )
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="demo-${PRETTY_BRANCH_NAME}-${RUN_ID}"
            ;;

            # named demo branch
            @(demo)\/+(?) )
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="demo-${PRETTY_BRANCH_NAME}-${RUN_ID}"
            ;;

            # named demo branch
            dependabot\/+(?) )
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="demo-${PRETTY_BRANCH_NAME}-${RUN_ID}"
            ;;

            # demo only branch
            "demo")
            TAG_SUFFIX="demo-${RUN_ID}"
            ;;

            # hotfix
            hotfix\/+(?) )
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="hotfix-${PRETTY_BRANCH_NAME}-${RUN_ID}"
            ;;

            # Release
            release\/+(?) )
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="release-${RUN_ID}"
            ;;

            *)
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            TAG_SUFFIX="${{ inputs.tagSuffixPreamble }}-${PRETTY_BRANCH_NAME}-${RUN_ID}"
            ;;
          esac
          shopt -u extglob;


          # build version number in full with value extracted from package.json + tag suffix if available
          PACKAGE_VERSION=${BASE_PACKAGE_VERSION}
          if [ ! -z "${TAG_SUFFIX}" ]; then
            PACKAGE_VERSION=${BASE_PACKAGE_VERSION}-${TAG_SUFFIX}
          fi

          # expose metadata as workflow variables
          echo "version=${PACKAGE_VERSION}" >> "$GITHUB_OUTPUT"
          echo "app_name=${APP_NAME}" >> "$GITHUB_OUTPUT"
          echo "publishable=${IS_PUBLISHABLE}" >> "$GITHUB_OUTPUT"

          # expose metadata as environment variables
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "GIT_COMMIT=${{ github.event.after }}" >> $GITHUB_ENV
          echo "APP_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

          echo "::notice ::App name: $APP_NAME"
          echo "::notice ::Version: $PACKAGE_VERSION"
          echo "::notice ::IsPublishable: $IS_PUBLISHABLE"
          echo "::notice ::Tag: $PACKAGE_VERSION"

      - name: Check if tag exists
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: mukunku/tag-exists-action@v1.2.0
        id: tag
        with:
          tag: ${{ steps.metadata.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}

      - name: Inform if tag exists
        if: ${{ steps.metadata.outputs.publishable == 'true' && steps.tag.outputs.exists == 'true' }}
        run: |
          echo "::error ::Tag already exists. Please make sure you bump version!"
          exit 1

      - name: Prep, Lint and Build NodeJS part
        env:
          NODE_AUTH_TOKEN: ${{ steps.npm_token.outputs.token }}
        run: |
          npm ci
          npm run lint
          npm run build:rel

      - name: Dotnet restore/publish
        run: |
          SOLUTION=$(node -p "require('./package.json').vsBuildSolution")

          dotnet restore $SOLUTION /p:Configuration=Release
          dotnet publish $SOLUTION -c Release -o ./$PUBLISH_PATH

      - name: Configure AWS credentials
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Configure Secondary AWS credentials
        if: ${{ inputs.secondaryEcrLogin }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          unset-current-credentials: true
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.secondary-aws-region }}

      - name: Login to Secondary Amazon ECR
        id: secondary-login-ecr
        if: ${{ inputs.secondaryEcrLogin }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml build
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml push

      - name: Logout of Amazon ECR
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Logout of Secondary Amazon ECR
        if: ${{ inputs.secondaryEcrLogin }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Create Git tag for release
        if: ${{ steps.metadata.outputs.publishable == 'true' }}
        run: |
          git tag $APP_VERSION
          git push origin $APP_VERSION

  merge:
    name: merge
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch
        uses: tj-actions/branch-names@v6

      - name: Check if vnext exists
        if: ${{ steps.branch.outputs.current_branch == 'master' }}
        id: vnext
        uses: GuillaumeFalourd/branch-exists@v1
        with:
          branch: vnext

      - name: Merge master -> vnext
        if: ${{ steps.vnext.outputs.exists == 'true' }}
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: vnext
          github_token: ${{ secrets.github-token }}
          message: "feat(*): merge from master"
