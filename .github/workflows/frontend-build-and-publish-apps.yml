name: Frontend Build and Publish Apps
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 14)
        required: false
        type: string
        default: '14'
      npm-registry-url:
        description: The url address for npm registry (defaults to https://www.myget.org/F/river-tech/npm/)
        required: false
        type: string
        default: https://www.myget.org/F/river-tech/npm/
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: '@odin'
      aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      dotnet-version:
        description: dotnet version to use (defaults to 6.0.x)
        required: false
        type: string
        default: '6.0.x'
    secrets:
      npm-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      github-token:
        required: true

concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      PUBLISH_PATH: obj/Docker/publish
      ODIN_CI_DEBUG_MODE: "true"
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          always-auth: true
          registry-url: ${{ inputs.npm-registry-url }}
          scope: ${{ inputs.npm-registry-scope }}
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Print environment versions
        run: |
          NODE_V=$(node --version)
          NPM_V=$(npm -v)
          echo node version':' $NODE_V
          echo npm version':' $NPM_V
          docker -v
          docker-compose -v
          DOTNET_CLI_V=$(dotnet --version)
          echo dotnet cli version':' $DOTNET_CLI_V
          git --version

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout
        uses: actions/checkout@v3.0.0
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}
      
      - name: Extract branch name
        id: branch
        run: |
          EVENT=${{ github.event_name }}
          if [ $EVENT == "pull_request" ]; then
            BRANCH_NAME=${{github.head_ref}}
            echo "::set-output name=name::${BRANCH_NAME}"
          else
            echo "::set-output name=name::${GITHUB_REF_NAME}"
          fi

      - name: Check if branch is publishable
        id: check-branch
        env:
          BRANCH_NAME: ${{ steps.branch.outputs.name}}
        run: |
          echo "::notice ::Branch name: $BRANCH_NAME"

          if ! ([ $BRANCH_NAME = "develop" ] || [ $BRANCH_NAME = "master" ] || [ $BRANCH_NAME = "vnext" ] || [[ "$BRANCH_NAME" =~ ^(feature|hotfix|dependabot)\/(.*)$ ]] || [[ "$BRANCH_NAME" =~ ^(([0-9]+|\.)+x)$ ]]); then
            echo "::set-output name=publishable::false"
            echo "::notice ::Non-publishable branch."
          else 
            echo "::set-output name=publishable::true"
          fi

      - name: Install npm
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build:rel

      - name: Install tools
        run: npm i -g @odin/infra.ci@0.1.22
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}

      - name: Dotnet restore/publish
        run: |
            SOLUTION=$(node -p "require('./package.json').vsBuildSolution")
            dotnet restore $SOLUTION /p:Configuration=Release
            dotnet publish $SOLUTION -c Release -o ./$PUBLISH_PATH

      - name: Set environment variables
        run: |
          BRANCH_NAME=${{steps.branch.outputs.name}}
          echo "::notice ::Branch name: $BRANCH_NAME"

          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "APP_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "GIT_COMMIT=${{ github.event.after }}" >> $GITHUB_ENV

          if [[ "$BRANCH_NAME" =~ ^(feature|dependabot)\/(.*)$ ]]
          then
            echo "APP_VERSION=$PACKAGE_VERSION-demo-${BASH_REMATCH[2]}-$GITHUB_RUN_ID" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ ^hotfix\/(.*)$ ]]
          then
            echo "APP_VERSION=$PACKAGE_VERSION-hotfix-${BASH_REMATCH[1]}-$GITHUB_RUN_ID" >> $GITHUB_ENV
          else
            echo "APP_VERSION=$(ci get:app-version --packageVersion=$PACKAGE_VERSION --branch=$BRANCH_NAME --incrementalSuffix=$GITHUB_RUN_ID)" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy
        if: ${{ steps.check-branch.outputs.publishable == 'true' }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml build
          echo $ECR_HOST $APP_NAME $APP_VERSION 
