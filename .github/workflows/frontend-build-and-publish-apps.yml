name: Frontend Build and Publish Apps
on:
  workflow_call:
    inputs:
      node-version:
        description: Node version to use (defaults to 14)
        required: false
        type: string
        default: '14'
      npm-registry-url:
        description: The url address for npm registry
        required: false
        type: string
        default: https://nexus.rivertech.dev/repository/npm/
      nuget-registry-url:
        description: The url address for nuget registry
        required: false
        type: string
        default: https://nexus.rivertech.dev/repository/nuget/index.json
      npm-registry-scope:
        description: The name of the npm scope (defaults to @odin)
        required: false
        type: string
        default: '@odin'
      aws-region:
        description: Which AWS region to use for publish storybook (defaults to eu-west-1)
        required: false
        type: string
        default: eu-west-1
      dotnet-version:
        description: dotnet version to use (defaults to 6.0.x)
        required: false
        type: string
        default: '6.0.x'

      publish:
        description: Set to true to publish artifacts to docker repository
        required: false
        type: boolean
        default: true

    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      PUBLISH_PATH: obj/Docker/publish
      ODIN_CI_DEBUG_MODE: "true"
    steps:
      - name: Debug Action Contexts
        uses: henrygriffiths/debug_action@v1
        with:
          secrets_context: ${{ toJson(secrets) }}
          needs_context: ${{ toJson(needs) }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Setup yq
        env:
          BINARY: 'yq_linux_amd64'
          VERSION: 'v4.25.1'
        run: |
          curl -sSLo /usr/bin/yq https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}
          chmod +x /usr/bin/yq

      - name: Checkout
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Setup Build Tools
        run: |
          NODE_AUTH_TOKEN=$(echo -n "${{ secrets.nexus-username }}:${{ secrets.nexus-password }}" | openssl base64)

          npm config set registry ${{ inputs.npm-registry-url }}
          npm config set always-auth true
          npm config set _auth ${NODE_AUTH_TOKEN}

          # Disable nuget.org source and river-tech source if present
          dotnet nuget disable source nuget.org
          dotnet nuget disable source river-tech

          dotnet nuget add source ${{ inputs.nuget-registry-url }} \
            -n nexus \
            -u ${{ secrets.nexus-username }} \
            -p ${{ secrets.nexus-password }} \
            --store-password-in-clear-text

      - name: Prepare Build Metadata and Environment
        id: metadata
        run: |
          # enable bash pattern matching
          shopt -s extglob;

          # determine branch name (diff source since this workflow can run either on push or pull_request events)
          case "${{ github.event_name }}" in
            "pull_request")
            BRANCH_NAME="${{ github.head_ref }}"
            ;;
            *)
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            ;;
          esac

          # determine version + tag
          BASE_PACKAGE_VERSION=$(cat ./package.json | yq .version)
          APP_NAME=$(cat ./package.json | yq .name)
          VERSION_TAG=""

          # determine publishability from

          case "$BRANCH_NAME" in

            "master")
            echo "::set-output name=publishable::true"
            ;;

            "develop")
            echo "::set-output name=publishable::true"
            VERSION_TAG="dev-${{ github.run_number }}"
            ;;

            "vnext")
            echo "::set-output name=publishable::true"
            ;;

            # feature
            feature\/+(?) )
            echo "::set-output name=publishable::true"
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            VERSION_TAG="demo-${PRETTY_BRANCH_NAME}-${{ github.run_number }}"
            ;;

            # hotfix
            hotfix\/+(?) )
            echo "::set-output name=publishable::true"
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            VERSION_-="hotfix-${PRETTY_BRANCH_NAME}-${{ github.run_number }}"
            ;;

            # named demo branch
            @(demo)\/+(?) )
            echo "::set-output name=publishable::true"
            PRETTY_BRANCH_NAME=$(basename $BRANCH_NAME | tr _ - )
            VERSION_TAG="demo-${PRETTY_BRANCH_NAME}-${{ github.run_number }}"
            ;;

            # demo only branch
            "demo")
            echo "::set-output name=publishable::true"
            VERSION_TAG="demo-${{ github.run_number }}"
            ;;

            *)
            echo "::set-output name=publishable::false"
            ;;
          esac
          shopt -u extglob;

          PACKAGE_VERSION=${BASE_PACKAGE_VERSION}

          if [ ! -z "${VERSION_TAG}" ]; then
            PACKAGE_VERSION=${BASE_PACKAGE_VERSION}-${VERSION_TAG}
          fi

          # expose metadata as workflow variables
          echo "::set-output name=branch::${BRANCH_NAME}"
          echo "::set-output name=version::${PACKAGE_VERSION}"
          echo "::set-output name=app_name::${APP_NAME}"

          # expose metadata as environment variables
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "GIT_COMMIT=${{ github.event.after }}" >> $GITHUB_ENV
          echo "APP_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

          echo "::notice ::Branch name: $BRANCH_NAME"
          echo "::notice ::App name: $APP_NAME"
          echo "::notice ::Version: $PACKAGE_VERSION"

      - name: Check if Git Tag exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$APP_VERSION$"; then
              echo "::error::tag $APP_VERSION already exists."
              exit 1
          fi

      - name: Prep, Lint and Build NodeJS part
        run: |
          npm ci
          npm run lint
          npm run build:rel

      - name: Dotnet restore/publish
        run: |
          SOLUTION=$(cat ./package.json | yq .vsBuildSolution)

          dotnet restore $SOLUTION /p:Configuration=Release
          dotnet publish $SOLUTION -c Release -o ./$PUBLISH_PATH

      - name: Configure AWS credentials
        if: ${{ inputs.publish }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ inputs.publish }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy
        if: ${{ inputs.publish }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml build
          docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml push

      - name: Logout of Amazon ECR
        if: ${{ inputs.publish }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Create Git tag for release
        if: ${{ inputs.publish }}
        run: |
          git tag $APP_VERSION
          git push origin $APP_VERSION

      - name: Downmerge master to develop
        if: ${{ inputs.publish && github.ref == 'master' }}
        run:  |
          BRANCH_NAME=${{steps.branch.outputs.name}}

          if [ "$BRANCH_NAME" != "master" ]
          then
            echo "::notice ::Skipping downmerge. Branch is not master."
            exit 0
          fi

          git fetch
          git checkout develop
          git config user.email "deploy-bot@riverigaming.com"
          git config user.name "rig-autobot"

          if git merge --no-commit --no-ff --no-edit origin/master
          then
            if [ -z "$(git status --porcelain)" ]
            then
              echo "::notice ::Nothing to commit"
            else
              git commit --no-edit
              git push origin develop
            fi
          else
            if git merge HEAD
            then
              echo "::notice ::"Nothing to merge"
            else
              echo "::warning ::"Failed to downmerge. Conflicts between master and develop."
              git merge --abort
            fi
          fi

      - name: Store npm artifact
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: npm-logs
          path: ~/.npm/_logs/*
          retention-days: 2
