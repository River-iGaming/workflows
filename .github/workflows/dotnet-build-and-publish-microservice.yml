name: .NET Build and Publish

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: dotnet version to use (defaults to 5.0.x)
        required: false
        type: string
        default: '5.0.x'
      publish:
        description: whether the docker image should be pushed
        required: false
        type: boolean
        default: false
      nuget-registry-url:
        description: The url address for nuget registry
        required: false
        type: string
        default: https://nexus.rivertech.dev/repository/nuget/index.json
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      PUBLISH_PATH: obj/Docker/publish
    steps:
      - name: Debug Action Contexts
        uses: henrygriffiths/debug_action@v1
        with:
          secrets_context: ${{ toJson(secrets) }}
          needs_context: ${{ toJson(needs) }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Setup yq
        env:
          BINARY: 'yq_linux_amd64'
          VERSION: 'v4.25.1'
        run: |
          curl -sSLo /usr/bin/yq https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}
          chmod +x /usr/bin/yq

      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Setup Build Tools
        run: |
          # Disable nuget.org source and river-tech source if present
          dotnet nuget disable source nuget.org
          dotnet nuget disable source river-tech

          dotnet nuget add source ${{ inputs.nuget-registry-url }} \
            -n nexus \
            -u ${{ secrets.nexus-username }} \
            -p ${{ secrets.nexus-password }} \
            --store-password-in-clear-text

      # Start 'Prepare Build Metadata and Environment'
      - name: Setup environmental variables
        run: |
          echo "SOLUTION=$(node -p "require('./package.json').vsBuildSolution")" >> $GITHUB_ENV
          echo "APP_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Get Version
        id: version
        uses: River-iGaming/actions/dotnet/versions@feature/mw-ms-version
        with:
          type: deploy
          package-version: ${{ env.PACKAGE_VERSION }}

      - name: Setup environmental variables (2)
        run: |
          echo "APP_VERSION=${{ steps.version.outputs.app-version }}" >> $GITHUB_ENV


      - name: Check if Git Tag exists
        if: ${{ github.run_attempt == '1' }}
        id: git-tag-check
        env:
          APP_VERSION: ${{ steps.version.outputs.app-version }}
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$APP_VERSION$"; then
              echo "::error::tag $APP_VERSION already exists."
              exit 1
          fi

      # End 'Prepare Build Metadata and Environment'

      - uses: actions/cache@v3
        if: ${{ github.run_attempt == '1' }}
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Dotnet restore/publish
        run: |
          SOLUTION=$(cat ./package.json | yq .vsBuildSolution)

          dotnet nuget list source
          dotnet restore $SOLUTION /p:Configuration=Release
          dotnet publish $SOLUTION -c Release -o ./$PUBLISH_PATH

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: ${{ inputs.publish }}
        env:
          ECR_HOST: ${{ steps.login-ecr.outputs.registry }}
          GIT_COMMIT: ${{ github.sha }}
        run: |
         docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml build
         docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.ci.yml push

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}


      - name: Create git tag for release
        if: ${{ steps.git-tag-check.conclusion != 'skipped' }}
        run: |
          git tag $APP_VERSION
          git push origin $APP_VERSION
          echo "::notice::Pushed image for $APP_NAME: $APP_VERSION"
