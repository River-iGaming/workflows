name: Merge to Higher Branches
on:
  workflow_call:
    inputs:
      version-file:
          description: File containing the app version
          required: false
          type: string
          default: "package.json"
      target-branch-pattern:
        description: Regex pattern for target branches (e.g. "[0-9]+\\.x")
        required: false
        type: string
        default: "[0-9]+\\.x"
      target-branches:
        description: Explicit list of target branches to merge into (overrides pattern)
        required: false
        type: string
    secrets:
      github-token:
        required: true
jobs:
  merge-higher:
    name: Merge to Higher Branches
    runs-on: ubuntu-latest
    outputs:
      manual-merge: ${{ steps.mergehigher.outputs.manual-merge }}
      target-branch: ${{ steps.mergehigher.outputs.target-branch }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: MergeHigher
        id: mergehigher
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          BRANCH_PATTERN="${{ inputs.target-branch-pattern }}"
          MANUAL_MERGE=false
          TARGET_BRANCH_OUTPUT=""

          CURRENT_BRANCH="$(git branch --show-current)"
          echo "current_branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT

          if [[ ! "$CURRENT_BRANCH" =~ ^${BRANCH_PATTERN}$ ]]; then
            echo "::notice ::Not a versioned branch like '**.x'. Skipping."
            exit 0
          fi

          CURRENT_MAJOR=$(echo "$CURRENT_BRANCH" | cut -d'.' -f1)

          git fetch --all

          if [[ -n "${{ inputs.target-branches }}" ]]; then
            IFS=',' read -r -a TARGET_BRANCH_ARRAY <<< "${{ inputs.target-branches }}"
            ALL_BRANCHES="${TARGET_BRANCH_ARRAY[@]}"
          else
            ALL_BRANCHES=$(git branch -r | grep -oE "origin/${BRANCH_PATTERN}" | sed 's|origin/||' | sort -V)
          fi

          echo "::notice ::Branches to merge: $ALL_BRANCHES"

          for TARGET_BRANCH in $ALL_BRANCHES; do
            TARGET_MAJOR=$(echo "$TARGET_BRANCH" | cut -d'.' -f1)
            if [[ "$TARGET_MAJOR" -gt "$CURRENT_MAJOR" ]]; then
              echo "::notice ::Attempting to merge $CURRENT_BRANCH â†’ $TARGET_BRANCH"

              git checkout $TARGET_BRANCH
              if git merge --no-commit --no-ff --no-edit ${CURRENT_BRANCH}; then
                if [[ (-z "$(git status --porcelain)") ]]; then
                  echo "::notice ::Nothing to commit for branch: $TARGET_BRANCH"
                else
                  git commit --no-edit
                  git push origin $branch
                fi
              else
                CONFLICTS=$(git diff --name-only --diff-filter=U)
                VERSION_FILE="${{ inputs.version-file }}"

                for file in $CONFLICTS; do
                  if [[ "$file" == "$VERSION_FILE" ]]; then
                    echo "::notice ::Auto-resolving $file version conflicts."

                    conflict_content=$(awk '/^<<<<<<< HEAD/,/^>>>>>>>/' "$file" || true)
                    echo "::notice ::Conflict content: $conflict_content"
                    
                    non_version_conflict_lines=$(echo "$conflict_content" | \
                      grep -vE '<<<<<<<|=======|>>>>>>>' | \
                      grep -vE '^\s*"version"\s*:' || true)

                    if [[ -n "$non_version_conflict_lines" ]]; then
                      echo "::error ::Unresolvable conflicts in $file"
                      git merge --abort
                      MANUAL_MERGE=true
                      continue 2
                    fi

                    git checkout --theirs $file
                    git add $file
                    git commit -m "chore(package): auto-resolve version conflict"
                    git push origin $TARGET_BRANCH
                    echo "::notice ::Resolved version conflict in $file"
                    TARGET_BRANCH_OUTPUT=$TARGET_BRANCH
                    continue 2
                  else
                    echo "::error ::Conflict in $file - not auto-resolvable"
                    git merge --abort
                    MANUAL_MERGE=true
                    continue 2
                  fi
                done
                if [ "$MANUAL_MERGE" = false ]; then
                  git commit -m "chore(*): auto-resolve version conflicts"
                  git push origin $branch
                fi
              fi
              TARGET_BRANCH_OUTPUT=$TARGET_BRANCH
            fi
          done

          echo "manual-merge=$MANUAL_MERGE" >> $GITHUB_OUTPUT
          echo "target-branch=$TARGET_BRANCH_OUTPUT" >> $GITHUB_OUTPUT

      - name: Manual Merge Notification
        if: ${{ steps.mergehigher.outputs.manual-merge == 'true' }}
        run: |
          echo "::error ::Conflicts occurred that couldn't be auto-resolved. Please resolve manually."
          exit 1

  bump-version:
    name: Bump Patch Version
    needs: merge-higher
    if: ${{ needs.merge-higher.outputs.manual-merge == 'false' && needs.merge-higher.outputs.target-branch != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Auto Bump
        uses: River-iGaming/actions/auto-bump@feature/auto-bump
        with:
          branch: ${{ needs.merge-higher.outputs.target-branch }}
          semver: patch
          github-token: ${{ secrets.github-token }}
